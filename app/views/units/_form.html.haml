-# frozen_string_literal: true
//
// Required locals:
//
// unit [Unit]
// context [Symbol] `:new` or `:edit`
//
= form_for(unit, remote: true) do |f|
  .error-messages
    - # populated via ajax by shared/_validation_messages.js.erb

  .form-group
    = f.label :title
    = f.text_field :title, class: "form-control"

  .form-group
    = f.label :parent_id, "Parent Unit"
    = f.select(:parent_id,
        unit_tree_options_for_select(unit.parent, true),
        {}, { class: "custom-select" })

  - unless f.object.parent
    .form-group
      = label_tag :primary_administrator, "Primary Administrator"
      = text_field_tag :primary_administrator,
                       f.object.primary_administrator&.to_autocomplete,
                       autocomplete: "off",
                       class: "form-control"
      .dropdown-menu
        - # populated by javascript

  .form-group
    = label_tag "Administrators"
    = hidden_field_tag "administering_users[]"
    - user_strings = f.object.administering_users.each.map(&:to_autocomplete)
    - user_strings << user_strings[-1]
    - user_strings.each do |user_str|
      .input-group.mb-3.user
        = text_field_tag "administering_users[]", user_str,
                         autocomplete: "off",
                         class: "form-control"
        .input-group-append
          %button.btn.btn-danger.remove{type: "button"} &minus;
        .dropdown-menu
          - # populated by javascript
    %button.btn.btn-success.add &plus;

  .clearfix
    .float-right
      %button.btn.btn-light{"data-dismiss": "modal", type: "button"} Cancel
      = f.submit(context == :new ? 'Create Unit' : 'Edit Unit',
                 class: 'btn btn-primary')
