-# @param user_group [UserGroup]

= form_for(user_group, remote: true) do |f|
  .error-messages
    -# populated via ajax by shared/_validation_messages.js.erb

  .form-group
    = f.label :key
    = f.text_field :key, class: 'form-control', disabled: !f.object.new_record?

  .form-group
    = f.label :name
    = f.text_field :name, class: 'form-control'

  %hr

  %h5 Local Users
  = hidden_field_tag "user_group[user_ids][]"
  - LocalUser.all.order(:name).each do |user|
    .form-check
      = check_box_tag "user_group[user_ids][]", user.id,
                        f.object.users.include?(user),
                        { id: "user_group_user_ids_#{user.id}", class: "form-check-input" }
      = label_tag "user_group_user_ids_#{user.id}",
        user.name, class: "form-check-label"

  %hr

  %h5 LDAP Groups
  = hidden_field_tag "user_group[ldap_group_ids][]"
  - LdapGroup.all.sort_by(&:short_name).each do |group|
    .form-check
      %strong
        = check_box_tag "user_group[ldap_group_ids][]", group.id,
                        f.object.ldap_groups.include?(group),
                        { id: "user_group_ldap_group_ids_#{group.id}", class: "form-check-input" }
        = label_tag "user_group_ldap_group_ids_#{group.id}",
        group.short_name, class: "form-check-label"
      %br
      %code.text-secondary= group.urn

  %hr

  %h5 Hosts
  .alert.alert-light
    %ul
      %li Hostnames, IP addresses, and IP address ranges are supported.
      %li
        Wildcards (
        %code> *
        ) are allowed in hostnames and IP addresses.
      %li
        Comments (starting with
        = succeed ")" do
          %code #
        are allowed at the end of lines.
    %h6 Examples
    %pre
      %code
        10.2.5.8       # single IP
        10.2.*         # asterisk range
        10.2.*-10.35.* # dash range
        10.2.0.0/16    # CIDR range
        example.org    # single hostname
        *.example.org  # example.org and any subdomain

  = hidden_field_tag "user_group[hosts][]"
  - hosts = f.object.hosts
  - hosts = [Host.new] if hosts.empty?
  - hosts.each do |host|
    .input-group.mb-3
      = text_field_tag "user_group[hosts][]", host.pattern,
                       class: "form-control"
      %button.btn.btn-danger.remove{type: "button"}
        %i.fa.fa-minus
  %button.btn.btn-success.add{type: "button"}
    %i.fa.fa-plus

  .clearfix
    .float-right
      %button.btn.btn-light{"data-dismiss": "modal", type: "button"} Cancel
      = f.submit(f.object.new_record? ? "Create User Group" : "Edit User Group",
                 class: "btn btn-primary")
