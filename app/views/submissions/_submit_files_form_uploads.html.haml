-# frozen_string_literal: true
-#
-# Requires the following locals:
-#
-# item [Item]
-#

#files-messages.error-messages
  -# populated via ajax by shared/_validation_messages.js.erb

-# Read in JavaScript to determine where to upload files to.
= hidden_field_tag "item_id", @item.id
-# Read in JavaScript to determine whether to display the remove buttons.
- can_delete_bitstreams = policy(@item).delete_bitstreams?
= hidden_field_tag "can_delete_bitstreams", can_delete_bitstreams

-# This table is modified by IDEALS.ItemFileUploader.addFile() (JavaScript).
-# Its structure must be kept in sync with that code.
%table.table.table-sm.files
  %tbody
    - item.bitstreams.order(:filename).each do |bitstream|
      %tr{"data-uri":      item_bitstream_path(item, bitstream),
          "data-filename": bitstream.filename}
        %td
          %i.fa.fa-check.text-success
        %td= bitstream.filename
        %td= number_to_human_size(bitstream.length)
        %td
          -# progress bar injected here
        - if can_delete_bitstreams
          %td
            %button.btn.btn-sm.btn-outline-danger.remove
              %i.fa.fa-minus
              Remove

-# This input is hidden via CSS. JavaScript sends #file-dropzone click events
-# to it in order to open a file selection dialog.
%input.file-chooser{type: "file", multiple: true}

.file-drop-zone.bg-light
  %div.mb-3
    %i.fa.fa-upload
    Attach files (not folders) by dropping them here or selecting them.
  %div
    %small Filenames must be unique, and folder structure is not preserved.
