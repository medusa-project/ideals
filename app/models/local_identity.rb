# frozen_string_literal: true

##
# Local user identity, which hooks into the `omniauth-identity` authentication
# strategy. This is more-or-less an OmniAuth-compatible surrogate of a
# {LocalUser} used for users whose credentials are stored locally, i.e. users
# without a NetID.
#
# N.B.: `omniauth-identity` wants this class to be named `Identity` by default.
# It was renamed to make it clearer that these identities are managed locally
# and are not surrogates for some kind of external identity.
#
# # Attributes
#
# * `activated`:         Whether the instance has been activated.
# * `activated_at`:      Time that the instance was activated (if it was).
# * `activation_digest`: Digest of the activation token, generated by
#                        {create_activation_digest}. N.B.: the token itself
#                        is stored in an instance variable and not persisted;
#                        use {authenticated?} to check that the token provided
#                        by the client matches this value.
# * `created_at`:        Managed by ActiveRecord.
# * `email`:             Email address associated with the instance. This is
#                        often used as an identifier and must be unique.
# * `invitee_id`:        Foreign key to {Invitee}.
# * `name`:              Name associated with the instance, possibly "first
#                        name last name" but could be whatever the user
#                        provides.
# * `password_digest`:   Digest of the password, set by {create_for_user}.
# * `reset_digest`:      Digest of the reset token, generated by
#                        {create_reset_digest}. Works exactly the same way as
#                        {activation_digest}.
# * `reset_sent_at`:
# * `updated_at`:        Managed by ActiveRecord.
#
# @see https://github.com/omniauth/omniauth-identity
#
class LocalIdentity < OmniAuth::Identity::Models::ActiveRecord

  attr_accessor :activation_token, :reset_token

  belongs_to :invitee, inverse_of: :identity

  after_create :create_activation_digest
  after_create :send_activation_email

  validates :email, presence: true, length: {maximum: 255},
            format: {with: StringUtils::EMAIL_REGEX},
            uniqueness: {case_sensitive: false}
  validates :name, presence: true
  validates :password, presence: true, length: {minimum: 6}
  validate :validate_invited, on: :create

  has_secure_password

  ##
  # Creates a counterpart for the given {LocalUser}. If one already exists, it
  # is updated with the given password.
  #
  # @param user [LocalUser]
  # @param password [String]
  # @return [LocalIdentity]
  #
  def self.create_for_user(user, password)
    invitee = Invitee.find_or_create_by(email: user.email)
    invitee.approval_state = ApprovalState::APPROVED
    invitee.save!

    identity           = find_or_create_by(email: user.email)
    salt               = BCrypt::Engine.generate_salt
    encrypted_password = BCrypt::Engine.hash_secret(password, salt)
    identity.update!(name: user.name,
                     password: password,
                     password_confirmation: password,
                     password_digest: encrypted_password,
                     invitee: invitee,
                     activated: true,
                     activated_at: Time.zone.now)
    identity
  end

  ##
  # @param string [String]
  # @return [String] Hash digest of the given string.
  #
  def self.digest(string)
    cost = if ActiveModel::SecurePassword.min_cost
             BCrypt::Engine::MIN_COST
           else
             BCrypt::Engine.cost
           end
    BCrypt::Password.create(string, cost: cost)
  end

  ##
  # @return [String] Random token.
  #
  def self.new_token
    SecureRandom.urlsafe_base64
  end

  ##
  # @param email [String] Email address.
  # @return [Boolean] Whether the given email address is related to the UofI.
  #
  def self.uofi?(email)
    domain = email.downcase.split("@").last
    ::Configuration.instance.uofi_email_domains.include?(domain)
  end

  def activate
    self.update_attribute(:activated, true)
    self.update_attribute(:activated_at, Time.zone.now)
  end

  ##
  # @return [String]
  #
  def activation_url
    raise "Activation token is not set." if self.activation_token.blank?
    base_url = ::Configuration.instance.website[:base_url].chomp("/")
    "#{base_url}/identities/#{self.id}/activate?token=#{self.activation_token}"
  end

  ##
  # @return [Boolean] Whether the given token matches the digest stored in the
  #         given attribute.
  #
  def authenticated?(attribute, token)
    digest = send("#{attribute}_digest")
    return false if digest.nil?
    BCrypt::Password.new(digest).is_password?(token)
  end

  ##
  # Creates and assigns new password reset attributes.
  #
  def create_reset_digest
    self.reset_token = LocalIdentity.new_token
    update_attribute(:reset_digest, LocalIdentity.digest(self.reset_token))
    update_attribute(:reset_sent_at, Time.zone.now)
  end

  def password_reset_expired?
    reset_sent_at < 2.hours.ago
  end

  ##
  # @return [String]
  # @raises [RuntimeError] if {reset_token} is blank. (Invoke
  #         {create_reset_digest} to remedy that.)
  #
  def password_reset_url
    raise "Reset token is not set." if self.reset_token.blank?
    base_url = ::Configuration.instance.website[:base_url].chomp("/")
    "#{base_url}/identities/#{self.id}/reset-password?token=#{self.reset_token}"
  end

  ##
  # Sends an activate-account email.
  #
  def send_activation_email
    notification = IdealsMailer.account_activation(self)
    notification.deliver_now
  end

  ##
  # Sends a password reset email. Typically this would be called after
  # {create_reset_digest}.
  #
  def send_password_reset_email
    notification = IdealsMailer.password_reset(self)
    notification.deliver_now
  end

  ##
  # @param password [String]
  # @param confirmation [String]
  #
  def update_password!(password:, confirmation:)
    update!(password: password, password_confirmation: confirmation)
    update_attribute(:reset_digest, nil)
    update_attribute(:reset_sent_at, nil)
  end

  private

  ##
  # Creates and assigns a new activation token and digest. This is done only
  # once, on instance creation.
  #
  def create_activation_digest
    self.activation_token = LocalIdentity.new_token
    update_attribute(:activation_digest, LocalIdentity.digest(self.activation_token))
  end

  def validate_invited
    if !invitee || invitee.expired?
      errors.add(:base, "Registered identity does not have a current invitation.")
    end
  end

end
