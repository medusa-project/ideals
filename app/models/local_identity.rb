# frozen_string_literal: true

##
# Local user identity, which hooks into the `omniauth-identity` authentication
# strategy. This is a surrogate of a {LocalUser} used for users whose
# credentials are stored locally, i.e. users without a NetID who don't log in
# via Shibboleth.
#
# N.B. 1: See the documentation of {Invitee} for a detailed overview of the
# invitation & registration process.
#
# N.B. 2: `omniauth-identity` wants this class to be named `Identity` by
# default. It was renamed to make it immediately clear that these identities
# are managed locally and are not used by all subclasses of {User}.
#
# N.B. 3: The superclass validates {password} and {password_confirmation} on
# update. In order to update an instance without supplying a password, use
# {update_attribute}.
#
# # Attributes
#
# * `activated`:           Whether the instance has been activated.
# * `activated_at`:        Time that the instance was activated (if it was).
# * `activation_digest`:   Digest of the activation token, generated by
#                          {create_activation_digest}. N.B.: the token itself
#                          is stored in an instance variable and not persisted,
#                          as it is typically sent out immediately to the user
#                          (in an email). Use {authenticated?} to check that
#                          the token provided by the user matches this value.
# * `created_at`:          Managed by ActiveRecord.
# * `email`:               Email address associated with the instance. This is
#                          often used as an identifier and must be unique.
# * `invitee_id`:          Foreign key to {Invitee}.
# * `name`:                Required by omniauth-identity but not really used
#                          otherwise. See {User#name} instead.
# * `password_digest`:     Digest of the password, set by {create_for_user}.
# * `registration_digest`: Digest of the registration token, generated by
#                          {create_registration_digest}. Works exactly the same
#                          as {activation_digest}.
# * `reset_digest`:        Digest of the reset token, generated by
#                          {create_reset_digest}. Works exactly the same way as
#                          {activation_digest}.
# * `reset_sent_at`:       Time that {reset_digest} was generated.
# * `updated_at`:          Managed by ActiveRecord.
#
# @see https://github.com/omniauth/omniauth-identity
#
class LocalIdentity < OmniAuth::Identity::Models::ActiveRecord

  attr_accessor :activation_token, :registration_token, :reset_token

  belongs_to :invitee, inverse_of: :identity
  has_one :user, inverse_of: :identity

  validates :email, presence: true, length: {maximum: 255},
            format: {with: StringUtils::EMAIL_REGEX},
            uniqueness: {case_sensitive: false}
  validates :name, presence: true
  validates :password, presence: true, length: {minimum: 6}
  validate :validate_invitee_expiration, on: :create

  accepts_nested_attributes_for :user, update_only: true

  has_secure_password

  ##
  # @param string [String]
  # @return [String] Hash digest of the given string.
  #
  def self.digest(string)
    cost = if ActiveModel::SecurePassword.min_cost
             BCrypt::Engine::MIN_COST
           else
             BCrypt::Engine.cost
           end
    BCrypt::Password.create(string, cost: cost)
  end

  ##
  # @return [String] Random token.
  #
  def self.new_token
    SecureRandom.urlsafe_base64
  end

  def activate
    self.update_attribute(:activated, true)
    self.update_attribute(:activated_at, Time.zone.now)
    self.update_attribute(:registration_digest, nil)
    self.update_attribute(:activation_digest, nil)
  end

  ##
  # @return [String]
  # @raises [RuntimeError] if {activation_token} is blank. (Invoke
  #         {create_activation_digest} to remedy that.)
  #
  def activation_url
    raise "Activation token is not set." if self.activation_token.blank?
    sprintf("https://%s/identities/%d/activate?token=%s",
            self.invitee.institution.fqdn,
            self.id,
            self.activation_token)
  end

  ##
  # @return [Boolean] Whether the given token matches the digest stored in the
  #         given attribute.
  #
  def authenticated?(attribute, token)
    digest = send("#{attribute}_digest")
    return false if digest.nil?
    BCrypt::Password.new(digest).is_password?(token)
  end

  ##
  # Creates and assigns a new activation token and digest. Also clears
  # {registration_digest}.
  #
  def create_activation_digest
    self.activation_token = LocalIdentity.new_token
    update_attribute(:activation_digest, LocalIdentity.digest(self.activation_token))
    update_attribute(:registration_digest, nil)
  end

  ##
  # Creates and assigns new registration attributes.
  #
  def create_registration_digest
    self.registration_token = LocalIdentity.new_token
    update_attribute(:registration_digest, LocalIdentity.digest(self.registration_token))
  end

  ##
  # Creates and assigns new password reset attributes.
  #
  def create_reset_digest
    self.reset_token = LocalIdentity.new_token
    update_attribute(:reset_digest, LocalIdentity.digest(self.reset_token))
    update_attribute(:reset_sent_at, Time.zone.now)
  end

  def password_reset_expired?
    reset_sent_at < 2.hours.ago
  end

  ##
  # @return [String]
  # @raises [RuntimeError] if {reset_token} is blank. (Invoke
  #         {create_reset_digest} to remedy that.)
  #
  def password_reset_url
    raise "Reset token is not set." if self.reset_token.blank?
    sprintf("https://%s/identities/%d/reset-password?token=%s",
            self.invitee.institution.fqdn,
            self.id,
            self.reset_token)
  end

  ##
  # @return [String]
  # @raises [RuntimeError] if {registration_token} is blank. (Invoke
  #         {create_registration_digest} to remedy that.)
  #
  def registration_url
    raise "Registration token is not set." if self.registration_token.blank?
    sprintf("https://%s/identities/%d/register?token=%s",
            self.invitee.institution.fqdn,
            self.id,
            self.registration_token)
  end

  ##
  # Sends an activate-account email.
  #
  # This is the counterpart of {send_invited_email} for user-initiated self-
  # invites.
  #
  def send_approval_email
    notification = IdealsMailer.account_approved(self)
    notification.deliver_now
  end

  ##
  # Sends an invitation to register for an account.
  #
  # This is the counterpart of {send_approval_email} for staff-initiated
  # invites.
  #
  def send_invited_email
    notification = IdealsMailer.invited(self)
    notification.deliver_now
  end

  ##
  # Sends a password reset email. Typically this would be called after
  # {create_reset_digest}.
  #
  def send_password_reset_email
    notification = IdealsMailer.password_reset(self)
    notification.deliver_now
  end

  ##
  # Sends an email to the invitee notifying them that their registration was
  # received, and a link to activate their account.
  #
  def send_post_registration_email
    IdealsMailer.account_registered(self).deliver_now
  end

  ##
  # @param password [String]
  # @param confirmation [String]
  #
  def update_password!(password:, confirmation:)
    update!(password: password, password_confirmation: confirmation)
    update_attribute(:reset_digest, nil)
    update_attribute(:reset_sent_at, nil)
  end


  private

  def validate_invitee_expiration
    if invitee&.expired?
      errors.add(:base, "Identity does not have a current invitation.")
    end
  end

end
